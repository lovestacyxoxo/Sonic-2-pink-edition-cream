local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootPart = character:FindFirstChild("HumanoidRootPart")

-- Create ScreenGui (if needed for debugging or additional UI)
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Table to store active animation tracks
local activeTracks = {}
local lastPosition = rootPart.Position

-- Flags to prevent restarting animations unnecessarily
local idleEnabled = false
local walkEnabled = false
local runEnabled = false
local worriedEnabled = false

-- Function to check player movement and play the appropriate animations
local function checkMovement()
    while true do
        task.wait(0.1) -- Faster response rate
        
        if rootPart and humanoid then
            local currentPosition = rootPart.Position
            local speed = humanoid.WalkSpeed  -- using the WalkSpeed property
            local movementMagnitude = (currentPosition - lastPosition).Magnitude
            
            if movementMagnitude < 0.1 then
                -- Idle condition
                if not idleEnabled then
                    idleEnabled = true
                    walkEnabled = false
                    runEnabled = false
                    worriedEnabled = false
                    if not activeTracks["Idle"] then
                        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
                        activeTracks["Idle"] = {}
                        local animation = Instance.new("Animation")
                        animation.AnimationId = "rbxassetid://139746464177889"
                        local track = animator:LoadAnimation(animation)
                        track:Play()
                        table.insert(activeTracks["Idle"], track)
                    end
                end
                -- Stop other animations
                for _, key in ipairs({"Walk", "Run", "Worried"}) do
                    if activeTracks[key] then
                        for _, track in ipairs(activeTracks[key]) do
                            track:Stop()
                        end
                        activeTracks[key] = nil
                    end
                end
                
            elseif speed == 13 then
                -- Walk condition
                if not walkEnabled then
                    walkEnabled = true
                    idleEnabled = false
                    runEnabled = false
                    worriedEnabled = false
                    if not activeTracks["Walk"] then
                        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
                        activeTracks["Walk"] = {}
                        local animation = Instance.new("Animation")
                        animation.AnimationId = "rbxassetid://86048057410043"
                        local track = animator:LoadAnimation(animation)
                        track:Play()
                        table.insert(activeTracks["Walk"], track)
                    end
                end
                -- Stop Idle, Run, Worried animations if playing
                for _, key in ipairs({"Idle", "Run", "Worried"}) do
                    if activeTracks[key] then
                        for _, track in ipairs(activeTracks[key]) do
                            track:Stop()
                        end
                        activeTracks[key] = nil
                    end
                end
                
            elseif speed == 30 or speed == 31 or speed == 32 then
                -- Run condition
                if not runEnabled then
                    runEnabled = true
                    idleEnabled = false
                    walkEnabled = false
                    worriedEnabled = false
                    if not activeTracks["Run"] then
                        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
                        activeTracks["Run"] = {}
                        for _, animId in ipairs({
                            "rbxassetid://83014237540068", 
                            "rbxassetid://104077515216832"
                        }) do
                            local animation = Instance.new("Animation")
                            animation.AnimationId = animId
                            local track = animator:LoadAnimation(animation)
                            track:Play()
                            table.insert(activeTracks["Run"], track)
                        end
                    end
                end
                -- Stop Idle, Walk, Worried animations if playing
                for _, key in ipairs({"Idle", "Walk", "Worried"}) do
                    if activeTracks[key] then
                        for _, track in ipairs(activeTracks[key]) do
                            track:Stop()
                        end
                        activeTracks[key] = nil
                    end
                end
                
            elseif speed >= 42 and speed <= 55 then
                -- Worried condition
                if not worriedEnabled then
                    worriedEnabled = true
                    idleEnabled = false
                    walkEnabled = false
                    runEnabled = false
                    if not activeTracks["Worried"] then
                        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
                        activeTracks["Worried"] = {}
                        local animation = Instance.new("Animation")
                        animation.AnimationId = "rbxassetid://18400648383"
                        local track = animator:LoadAnimation(animation)
                        track:Play()
                        table.insert(activeTracks["Worried"], track)
                    end
                    -- Fire the remote call with "worried" argument
                    local args = { [1] = "worried" }
                    game:GetService("ReplicatedStorage").remotes.expressions:FireServer(unpack(args))
                end
                -- Stop Idle, Walk, Run animations if playing
                for _, key in ipairs({"Idle", "Walk", "Run"}) do
                    if activeTracks[key] then
                        for _, track in ipairs(activeTracks[key]) do
                            track:Stop()
                        end
                        activeTracks[key] = nil
                    end
                end
                
            else
                -- No specific condition met: Stop all animations and reset flags
                idleEnabled = false
                walkEnabled = false
                runEnabled = false
                worriedEnabled = false
                for _, key in ipairs({"Idle", "Walk", "Run", "Worried"}) do
                    if activeTracks[key] then
                        for _, track in ipairs(activeTracks[key]) do
                            track:Stop()
                        end
                        activeTracks[key] = nil
                    end
                end
            end
            
            lastPosition = currentPosition
        end
    end
end

spawn(checkMovement)
